#!/usr/bin/perl

use strict;
use warnings;
use Libfreenect;

use Curses;
use POE qw(Wheel::Curses);

POE::Session->create(
  inline_states => {
    _start => \&_start,
    got_freenect => \&got_freenect,
    got_keystroke => \&got_keystroke,
    _stop => \&_stop,
  }
);

sub got_freenect {
  return unless $_[HEAP]{freenect}{lib};
  my $lib = $_[HEAP]{freenect}{lib};

  $lib->update_tilt_state;
  my @tilt = $lib->get_tilt_state;
  my @accel = $lib->get_mks_accel;
  addstr( 0, 0, ' ' x 80 );
  addstr( 1, 0, ' ' x 80 );
  addstr( 2, 0, ' ' x 80 );
  addstr( 3, 0, ' ' x 80 );
  addstr( 4, 0, ' ' x 80 );
  addstr( 5, 0, ' ' x 80 );
  addstr( 0, 0, "x:      $tilt[0]" ); addstr( 0, 40, "dx: $accel[0]" );
  addstr( 1, 0, "y:      $tilt[1]" ); addstr( 1, 40, "dy: $accel[1]" );
  addstr( 2, 0, "z:      $tilt[2]" ); addstr( 2, 40, "dz: $accel[2]" );
  addstr( 4, 0, "angle:  $tilt[3]" );
  addstr( 5, 0, "status: $tilt[4]" );

  noutrefresh;
  doupdate;

  if ( $lib->process_events ) {
    print "Got event!\n";
  }
  $_[KERNEL]->yield('got_freenect');
}

sub _start {
  $_[HEAP]{console} = POE::Wheel::Curses->new(
    InputEvent => 'got_keystroke',
  );
  my $lib = Libfreenect->new;
  #$lib->set_log_level( FREENECT_LOG_DEBUG );
  #$lib->set_log_level( FREENECT_LOG_FLOOD );
  $lib->num_devices > 0 or die( "No devices found!" );
  $lib->open_device( 0 );
  $lib->set_video_format( FREENECT_VIDEO_RGB );
  $lib->set_depth_format( FREENECT_DEPTH_11BIT );
  $lib->start_depth;
  $lib->start_video;

  $_[HEAP]{freenect} = {
    lib => $lib,
    angle => 0,
    buffers => {
      depth_mid => $lib->malloc_buffer( 640 * 480 * 3 ),
      depth_front => $lib->malloc_buffer( 640 * 480 * 3 ),
      rgb_back => $lib->malloc_buffer( 640 * 480 * 3 ),
      rgb_mid => $lib->malloc_buffer( 640 * 480 * 3 ),
      rgb_front => $lib->malloc_buffer( 640 * 480 * 3 ),
    },
  };

$lib->set_my_callbacks();

#  # Inspect a byte of the rgb_front buffer
#  $lib->set_video_buffer( $_[HEAP]{buffers}{rgb_front} );
#$lib->process_events();
#  print "Byte value: [".$lib->get_buffer_value( $_[HEAP]{buffers}{rgb_front}, 9 ). "]\n";

  $_[KERNEL]->yield('got_freenect');
}

sub got_keystroke {
  my $keystroke = $_[ARG0];

  # Make control and extended keystrokes printable.
  if ($keystroke lt ' ') {
    $keystroke = '<' . uc(unctrl($keystroke)) . '>';
  }
  elsif ($keystroke =~ /^\d{2,}$/) {
    $keystroke = '<' . uc(keyname($keystroke)) . '>';
  }

  noutrefresh();
  doupdate;

  my $freenect = $_[HEAP]{freenect};
  my %action = (
    '0' => sub { $freenect->{lib}->set_led( LED_BLINK_GREEN ) },
    '1' => sub { $freenect->{lib}->set_led( LED_BLINK_RED_YELLOW ) },
    '2' => sub { $freenect->{lib}->set_led( LED_BLINK_YELLOW ) },
    '3' => sub { $freenect->{lib}->set_led( LED_GREEN ) },
    '4' => sub { $freenect->{lib}->set_led( LED_OFF ) },
    '5' => sub { $freenect->{lib}->set_led( LED_RED ) },
    '6' => sub { $freenect->{lib}->set_led( LED_YELLOW ) },
    'w' => sub { $freenect->{angle}++ },
    's' => sub { $freenect->{angle} = 0 },
    'x' => sub { $freenect->{angle}-- },
  );
  $action{$keystroke}->() if $action{$keystroke};
  $freenect->{angle} = 30 if $freenect->{angle} > 30;
  $freenect->{angle} = -30 if $freenect->{angle} < -30;

  $freenect->{lib}->set_tilt_degs( $freenect->{angle} );

  # Gotta exit somehow.
  if ( $keystroke eq 'q' or $keystroke eq '<^C>' ) {
    $_[KERNEL]->yield('_stop');
    delete $_[HEAP]{console};
  }
}

sub _stop {
  my $lib = $_[HEAP]{freenect}{lib};
  for my $k ( keys %{$_[HEAP]{freenect}{buffers}} ) {
    $lib->free_buffer( $_[HEAP]{freenect}{buffers}{$k} );
  }
  $lib->set_led( LED_OFF );
  $lib->set_tilt_degs( 0 );
  $lib->stop_video;
  $lib->stop_depth;
  $lib->close_device( 0 );
  $lib->shutdown or die "Unclean shutdown\n";
  delete $_[HEAP]{freenect}{lib};
}

POE::Kernel->run();
exit;
